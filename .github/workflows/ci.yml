name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# TODO: Add more jobs for testing, etc.
jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Setup Node.js environment
      uses: actions/setup-node@v2
      with:
        node-version: 14.x
    - name: Install dependencies
      run: |
        npm i -g npm@^7
        npm i
    - name: Compile source files
      run: |
        npm run compile:css
        npm run compile:js

    - name: Docker meta
      id: meta
      uses: crazy-max/ghaction-docker-meta@v3
      with:
        # list of Docker images to use as base name for tags
        images: |
          axelrindle/github-starred-index
        # generate Docker tags based on the following events/attributes
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
        flavor: |
          latest=true

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        context: .
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64,linux/arm/v7
    # - name: Update repo description
    #   uses: peter-evans/dockerhub-description@v2
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_TOKEN }}
    #     repository: axelrindle/github-starred-index
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
